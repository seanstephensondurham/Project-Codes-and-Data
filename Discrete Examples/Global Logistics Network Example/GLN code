# ------------------------- WORLD LOGISTICS NETWORK CODE -------------------------
# -- USER REQUIRED TO DOWNLOAD RELEVANT DATA FILES PRIOR TO RUNNING THE PROGRAM --
# --------------- FILES REQUIRED: "GLN NODES", "GLN ARC DISTANCES" ---------------
# ------- CHANGE FILE DIRECTORY LINES BELOW TO ACCESS CHOSEN FILE LOCATION -------
# --------------------------- GUROBI SOFTWARE REQUIRED ---------------------------


library("gurobi")
library("Matrix")
library("stringi")
library("data.table")

# Define the functions used for custom utility

# air
fa = function(x,w,s){
	y = (1000 + x)*ceiling(w/30000)
	return(y)
}

# boat
fb = function(x,w,s){
	y = (50 + 5*x*(5*s)^2)*(w/40000)
	return(y)
}

# rail
fra = function(x,w,s){
	y = (10 + 9*x*(3*s)^2)*ceiling(w/60000)
	return(y)
}

# road
fro = function(x,w,s){
	y = (20 + 10*s*x)*ceiling(w/40000)
	return(y)
}

# Weight and speed values to be entered by the user
w = 10000
s = 0.05

# Decide the cost for changing modes of transport - e.g. moving from Rome (Ra) to Rome (B)
change = 1000

route = NULL # to be used for printing full route at the end

# Numbers of each node can be found in relevant data file in repository
start = 43
finish = 392


nodes = fread("Transport nodes.csv")
number_of_nodes = dim(nodes)[1]
arcs = as.matrix(read.csv(paste0(getwd(),"/Transport arc distances.csv"),sep=";",header=FALSE))
number_of_arcs = dim(arcs)[1]


# Edits the utility cost along each arc according to which mode of transport it corresponds to, 
# applying the associated utility function from above
for (i in 1:number_of_arcs){
	if (arcs[i,3] != 1){	
		if (nodes$Mode[arcs[i,1]] == "(B)"){

			arcs[i,3] = fb(arcs[i,3],w,s)

		} else if (nodes$Mode[arcs[i,1]] == "(Ro)"){

			arcs[i,3] = fro(arcs[i,3],w,s)

		} else if (nodes$Mode[arcs[i,1]] == "(Ra)"){

			arcs[i,3] = fra(arcs[i,3],w,s)

		} else if (nodes$Mode[arcs[i,1]] == "(A)"){

			arcs[i,3] = fa(arcs[i,3],w,s)

		}
	} else {arcs[i,3] = change}
}
		
# Following constructions similar to those in the London Underground example
n = rep(0,number_of_nodes) # construct vector of exiting flow - initially all 0 as only start/end nodes require non-zero total flow
n[c(start,finish)]=c(-1,1) #changes start/end entries to necessary flows

Nabla = replicate(number_of_nodes,numeric(number_of_arcs))

for (i in 1:number_of_arcs){
	Nabla[i,arcs[i,1]] = -1
	Nabla[i,arcs[i,2]] = 1
}

Phi = arcs[,3]

result = gurobi(
	list(
		A = t(Nabla),
		obj = Phi,
		modelsense = "min",
		rhs = n,
		sense = "=",
		start = matrix(0,number_of_arcs,1)
	),
	params = NULL
)


pi = result$x # isolates required output - transport map pi

arrived = FALSE
vnodes = 0
i = start

eqpath = which(pi > 0)
pnode = nodes[i,1]
cnode = nodes[i,1]

# The use of fread() rather than a simpler read.csv() function
# means that we can isolate the mode of transport more easily than we could 
# isolate the tube line in the Underground example

mode = nodes$Mode[i]

while(arrived == FALSE){
	leavingi = which(Nabla[,i] == -1)
	a = intersect(eqpath,leavingi)[1]
	j = which(Nabla[a,] == 1)[1]
	
	# Previous and current nodes
	pnode = cnode
	cnode = nodes$Node[j]
	
	# If the first few characters (4 chosen arbitrarily) of pnode and cnode match, 
	# then we must be in the same geographical location but changing mode of transport.
	# Hence we use the below code to output the route

	if (isTRUE(substr(pnode,1,4) == substr(cnode,1,4))){
		route = paste(route,"\n",(paste0("Switch transport: ",nodes$Mode[i]," to ",nodes$Mode[j])))
	} else {
		mode = nodes$Mode[j]
		route = paste(route,"\n",(paste0(pnode," to ",cnode," : ",mode)))
	}	

	i = j
	if (j == finish){
		arrived = TRUE
		route = paste(route,"\n")
	}
}
	
cat(route)
